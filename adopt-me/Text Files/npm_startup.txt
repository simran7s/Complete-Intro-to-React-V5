1) `npm init` (initialized a json file)
2)Installing npm dependencies using
    `npm install -D _______` -D is when you want the dependency to only be installed for your local machine, for you wont need it when exporting for deployment

    'npm i -D prettier' also works

3) Whenever we install a dependency it gets added in the package.json under `"devDependencies":`

4) installing the dependency we jsut got. Example for us is prettier. We need to add to the scripts in package.json

    "format": "prettier \"src/**/*.{js,html}\" --write",

    this will format all js and html files and write(edit the text) them in the same way using prettier

5) Change settings and install prettier through vsCode Extensions. 

    check `Prettier: require config`

    this makes it so that Prettier only runs on files that have prettier installed on it through NPM the way we did it above



6) Create file in root called ".prettierrc" inside just write `{}` this is have it so when using prettier we will just have the default settings

7) we will install eslint and eslint-config-prettier
    `npm i -D eslint eslint-config-prettier`

    eslint checks the styling and makes sure we are using proper styles with js the correct js methods etc, (checks for not having unused vars, using old constructs etc)

    eslint-config-prettier says to eslint to not worry about the tabs and spacing and just let prettier handle that stuff


8. create a eslintrc.json file in root

        `
        {
        "extends": ["eslint: recommended", "prettier", "prettier/react"],
        "plugins": [],
        "parserOptions": {
            "ecmaVersion": 2018,
            "sourceType": "module",
            "ecmaFeatures": {
            "jsx": true
            }
        },
        "env": {
            "es6": true,
            "browser": true,
            "node": true
        }
        }

        `

        parserOptions: it tells it to use es6 constructs, modules allows us to use import export, etc etc

9. Add another script in package.json

    `
    "lint": "eslint \"src/**/.{js,jsx}\" --quiet",
    `

    ... still cant run because we gotta define React in app.js

10. install parcel (simlar to webpack)
    `npm install -D parcel -bundler`

11. add script for parcel
    `"dev": "parcel src/index.html"`

    parcel just points at index.html then it figures stuff out on itself

    by adding parcel it has babel and jsx built in(allowings html in js)


12. Fix React
    `$ npm i react react-dom`

    installs both packages

13. Allow eslint to understand React better using

    `$ npm i -D babel-eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react`

    babel-eslint - allows eslint to be augmneted by babel(the transpiler)

    eslint-plugin-import - gives new rules for importing and exporting

    eslint-plugin-jsx-a11y - helps with catching accessability things
    
    eslint-plugin-react - helps understand addtional react rules

14. Go to eslintrc.json and add the following
    `"extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommened",
    "prettier",
    "prettier/react"
  ],`

    *prettier stuff must be at the bottom.
  
      "rules": {
    "react/pro-types": 0,
    "no-console": 1
  },

    *This just turns off some rules and makes it so that we can console.log

    "settings": {
    "react": {
      "version": "detect"
    }

    *tells eslint what version of react we are using(detect tells it eslint to figure it out on its own from the package.json file)
   
15. Eslint hook compatability(adds the hook rules)
    $ npm i -D eslint-plugin-react-hooks

    add these to eslint file

    "rules": {
    "react/pro-types": 0,
    "no-console": 1,
    "react-hooks/rules-of-hooks": 2,
    "react-hooks/exhaustive-deps": 1
  },
  "plugins": ["react", "import", "jsx-a11y", "react-hooks"],

  NOTE: 0 = ignore
        1 = warn
        2 = throw error